{"version":3,"sources":["components/Alert.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","className","type","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","Navbar","mode","href","title","id","aboutText","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","document","getElementById","select","navigator","clipboard","writeText","value","showAlert","execCommand","rows","backgroundColor","onChange","event","console","log","target","placeholder","newText","split","reverse","join","filter","n","length","defaultProps","App","setMode","setAlert","message","setTimeout","body","toggleMode1","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.5d26efd6.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Alert(props) {\r\n\r\n    const capitalize = (word) => {\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n\r\n    return (\r\n        props.alert &&\r\n        <div>\r\n            <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n                <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                    <li className=\"nav-item\">\r\n                    <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                    <a className=\"nav-link\" href=\"#\">{props.aboutText}</a>\r\n                    </li>\r\n                </ul>\r\n                {/* <form className=\"d-flex\">\r\n                    <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n                    <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n                </form> */}\r\n                {/* <div className=\"d-flex\">\r\n                    <div className={`greenmode bg-${props.mode=='success'?'danger':'success'} my-3 mx-3`} onClick={props.toggleMode1} ></div>\r\n                    <div className=\"redmode mx-4\" onClick={props.toggleMode1}></div> \r\n                </div> */}\r\n                <div className={`form-check form-switch text-${props.mode=='light'?'dark':'light'} mx-2`}>\r\n                    <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n                    <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">DarkMode</label>\r\n                </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    aboutText : PropTypes.string\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title: '{Set title here}',\r\n    aboutText: 'About'\r\n}","import React, {useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n\r\n    const [text, setText] = useState('');\r\n\r\n    const upperCase = () => {\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to UpperCase\", \"success\");\r\n    };\r\n\r\n    const lowerCase = () => {\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to LowerCase\", \"success\");\r\n    };\r\n\r\n    const reverseString = () => {\r\n        let newText = text.split('').reverse().join('');\r\n        setText(newText);\r\n        props.showAlert(\"String Reversed\", \"success\");\r\n    };\r\n\r\n    const handleCopy = () => {\r\n        var text = document.getElementById('myBox');\r\n        text.select();\r\n        try{\r\n            navigator.clipboard.writeText(text.value);\r\n            props.showAlert(\"Copied to ClipBoard\", \"success\");\r\n        }\r\n        catch{\r\n            document.execCommand(\"copy\");\r\n            props.showAlert(\"Extra apaces removed\", \"success\");\r\n        }\r\n    }\r\n\r\n    const handelExtraSpaces = () => {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(' '));\r\n        props.showAlert(\"Extra White Space Handled\", \"success\");\r\n    }\r\n\r\n    const textClear = () => {\r\n        setText(\"\");\r\n        props.showAlert(\"Text Cleared\", \"success\");\r\n    };\r\n\r\n    const handleOnChange = (event) => {\r\n        console.log(\"Handelled\");\r\n        setText(event.target.value)\r\n    };\r\n    \r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color: props.mode=='dark'?'white':'#1a1a1a' }}>\r\n            <div className=\"d-flex justify-content-between\">\r\n                <h1>{props.heading}</h1>\r\n                <div className=\"d-flex justify-content-end\">\r\n                    <button className=\"btn btn-primary mx-2 my-2\" onClick={handleCopy}>Copy</button>\r\n                    <button className=\"btn btn-danger my-2 mx-2\" onClick={textClear}>Clear</button>\r\n                </div>\r\n            </div>\r\n            <div className=\"my-3\">\r\n                <textarea className=\"form-control\" id=\"myBox\" rows=\"8\" style={{backgroundColor: props.mode=='dark'?'#1a1a1a':'white', color: props.mode=='dark'?'white':'#1a1a1a' }} value={text} onChange={handleOnChange} placeholder={props.placeholder} ></textarea>\r\n            </div>\r\n            <div className=\"d-flex flex-wrap justify-content-start my-3\">\r\n                <button className=\"btn btn-primary mx-2 my-1\" onClick={upperCase}>Convert to Uppercase</button>\r\n                <button className=\"btn btn-primary mx-2 my-1\" onClick={lowerCase}>Convert to Lowercase</button>\r\n                <button className=\"btn btn-primary mx-2 my-1\" onClick={reverseString}>Reverse String</button>\r\n                <button className=\"btn btn-primary mx-2 my-1\" onClick={handelExtraSpaces}>Handel Exttra Spaces</button>\r\n            </div>\r\n        </div>\r\n        <div className=\"container my-3\" style={{color: props.mode=='dark'?'white':'#1a1a1a' }}>\r\n            <h2>Your text Summary</h2>\r\n            <div className=\"d-flex flex-wrap justify-content-start my-3\">\r\n                <p className=\"badge bg-info text-wrap fs-3\">{text.split(\" \").filter(function(n) { return n != \"\" }).length} Words</p> {/*{text.split(\" \").length}  text.split(\" \").length*/}\r\n                <p className=\"badge bg-info text-wrap mx-2 fs-3\">{text.split(\"\").filter((n)=>{return n!=\" \"}).length} Characters</p>                                                   \r\n                <p className=\"badge bg-info display-wrap text-wrap  fs-3\">{0.008 * text.split(\"\").filter((n)=>{return n!=\" \"}).length} Minutes Read</p>\r\n                \r\n            </div>\r\n            <div className=\"my-3\">\r\n                <h2>Preview</h2>\r\n                <p>{text.length>0?<b>{text}</b>:'Enter something in the the textarea above to preview it here'}</p>\r\n            </div>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nTextForm.defaultProps = {\r\n    placeholder: 'Enter text here'\r\n}","import { useState } from 'react';\nimport './App.css';\n// import About from './components/About';\nimport Alert from './components/Alert';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n//   Link\n// } from 'react-router-dom';\n\n\n\nfunction App() {\n\n  const [mode, setMode] = useState('light'); //Whether dark mode is enabled or not\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n      setAlert({\n        msg: message,\n        type: type\n      })\n\n      setTimeout(() => {\n        setAlert(null);        \n      }, 1500);\n  }\n  \n\n\n\n  const toggleMode = () => {\n    if(mode == 'light' || mode == 'success' || mode == 'danger'){\n      setMode('dark');\n      document.body.style.backgroundColor = '#1a1a1a';\n      showAlert(\"Dark mode has been enabled\", \"success\");\n    }\n    else if(mode == 'dark' || mode == 'success' || mode == 'danger'){\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode has been enabled\", \"success\");\n    }\n  }\n\n  const toggleMode1 = () => {\n    if(mode == 'light' || mode == 'dark' || mode =='success'){\n      setMode('danger');\n      document.body.style.backgroundColor = '#a71523';\n      showAlert(\"Red Mode has been enabled\", \"success\");\n    }\n    else if(mode == 'light' || mode == 'dark' || mode =='danger'){\n      setMode('success');\n      document.body.style.backgroundColor = '#188218';\n      showAlert(\"green Mode has been enabled\", \"success\");\n    }\n  }\n\n  return (\n    <>\n      {/* <Navbar title=\"TextUtils\" aboutText=\"About Us\"/>  */}\n      {/* <Navbar/> */}\n      {/* /about         |   both will show about page so its a \n          /about/user    |     good prcatice to use \"exact       */}\n      {/* <Router> */}\n        <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} toggleMode1={toggleMode1}/>\n        <Alert exact alert={alert}/>\n        <div className=\"container my-3\">\n          {/* <Switch>\n            <Route exact path=\"/about\">\n              <About/>\n            </Route>\n            <Route path=\"/\"> */}\n              <TextForm heading=\"Enter Text to Analyze Below\" showAlert={showAlert} mode={mode}/>\n            {/* </Route>\n          </Switch> */}\n          </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}